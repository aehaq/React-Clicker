{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Header/Header.js","components/Jumbotron/Jumbotron.js","components/GameCards/GameCards.js","components/GameBox/GameBox.js","App.js","index.js"],"names":["Wrapper","props","children","Header","className","result","score","topScore","Jumbotron","GameCard","alt","name","src","image","id","key","onClick","handleClick","GameBox","App","state","options","randomizeOrder","console","log","map","a","Math","random","sort","b","setState","chosen","find","item","clicked","this","option","Component","ReactDOM","render","document","getElementById"],"mappings":"y3CAOeA,G,MAJC,SAAAC,GAAK,OACjB,6BAAMA,EAAMC,YCMDC,EARA,SAAAF,GAAK,OAChB,yBAAKG,UAAU,2CACX,yBAAKA,UAAU,mBAAkB,4CACjC,yBAAKA,UAAU,mBAAkB,4BAAKH,EAAMI,SAC5C,yBAAKD,UAAU,mBAAkB,sCAAYH,EAAMK,MAAlB,YAAkCL,EAAMM,aCKlEC,G,MARG,kBACd,yBAAKJ,UAAU,oCACX,wBAAIA,UAAU,aAAd,eACA,6BACA,uBAAGA,UAAU,QAAb,gGAAiH,6BAAjH,uFAA2M,6BAA3M,IAAkN,6BAAlN,kBCGOK,G,MAPE,SAAAR,GAAK,OAClB,yBAAKG,UAAU,QACb,yBAAKA,UAAU,gBAAgBM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,MAAOC,GAAIb,EAAMa,GAAIC,IAAKd,EAAMa,GAAIE,QAAS,kBAAMf,EAAMgB,YAAYhB,EAAMa,UCE7HI,G,MAJC,SAAAjB,GAAK,OACjB,yBAAKG,UAAU,mBAAmBH,EAAMC,YCoG7BiB,G,iNA7FbC,MAAQ,CACNC,QAASA,EACTf,MAAO,EACPC,SAAU,EACVF,OAAQ,2B,EAGViB,eAAiB,WAEfC,QAAQC,IAAI,eAEZ,IAAMH,EAAU,EAAKD,MAAMC,QAAQI,KAAI,SAACC,GAAD,MAAO,CAACC,KAAKC,SAAUF,MAC7DG,MAAM,SAACH,EAAGI,GAAJ,OAAUJ,EAAE,GAAGI,EAAE,MACvBL,KAAK,SAACC,GAAD,OAAOA,EAAE,MAEf,EAAKK,SAAS,CAACV,QAASA,K,EAI1BJ,YAAc,SAAAH,GACZ,IAAMkB,EAAS,EAAKZ,MAAMC,QAAQY,MAAK,SAAAC,GAAI,OAAGA,EAAKpB,KAAOA,MAGnC,IAAnBkB,EAAOG,SAGT,EAAKJ,SAAS,CACZzB,MAAO,EACPD,OAAQ,gCACRgB,QAAS,EAAKD,MAAMC,QAAQI,KAAK,SAACS,GAAD,OAAUA,EAAKC,SAAU,OAI5D,EAAKb,mBAMoB,KAArB,EAAKF,MAAMd,MAGb,EAAKyB,SAAS,CACZzB,MAAO,EACPC,SAAU,GACVF,OAAQ,wDACRgB,QAAS,EAAKD,MAAMC,QAAQI,KAAK,SAACS,GAAD,OAAUA,EAAKC,SAAU,QAO5DH,EAAOG,SAAU,EACjB,EAAKJ,SAAS,CACZzB,MAAO,EAAKc,MAAMd,MAAQ,EAC1BD,OAAQ,mCAIN,EAAKe,MAAMd,OAAS,EAAKc,MAAMb,UAEjC,EAAKwB,SAAS,CAACxB,SAAU,EAAKa,MAAMb,SAAW,KAKnD,EAAKe,mB,wEAKC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQhB,MAAO8B,KAAKhB,MAAMd,MAAOC,SAAU6B,KAAKhB,MAAMb,SAAUF,OAAQ+B,KAAKhB,MAAMf,SACnF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG+B,KAAKhB,MAAMC,QAAQI,KAAI,SAAAY,GAAM,OAC9B,kBAAC,EAAD,CACEpB,YAAa,EAAKA,YAClBH,GAAIuB,EAAOvB,GACXC,IAAKsB,EAAOvB,GACZD,MAAOwB,EAAOxB,MACdF,KAAM0B,EAAO1B,gB,GAtFP2B,cCJlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.20571ecc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wrapper.css\"\r\n\r\nconst Wrapper = props => (\r\n    <div>{props.children}</div>\r\n);\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nconst Header = props => (\r\n    <div className=\"navbar fixed-top bg-dark row text-white\">\r\n        <div className=\"col text-center\"><h4>Memory Game</h4></div>\r\n        <div className=\"col text-center\"><h5>{props.result}</h5></div>\r\n        <div className=\"col text-center\"><h5>Score: {props.score} | Best: {props.topScore}</h5></div>\r\n    </div>\r\n  );\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = () => (\r\n    <div className=\"jumbotron text-center text-white\">\r\n        <h1 className=\"display-4\">M.E.M. Test</h1>\r\n        <hr />\r\n        <p className=\"lead\"> Welcome to the M.E.M. (Memory Evaluation Metric) test. Please click on any card to Proceed. <br />  If you click any card more than once, you will fail the test and must start over. <br /> <br /> Good Luck!</p>\r\n    </div>\r\n  );\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./GameCards.css\";\r\n\r\nconst GameCard = props => (\r\n    <div className=\"card\">\r\n      <img className=\"img-thumbnail\" alt={props.name} src={props.image} id={props.id} key={props.id} onClick={() => props.handleClick(props.id)}>\r\n      </img>\r\n    </div>\r\n);\r\n\r\nexport default GameCard;","import React from \"react\";\r\nimport \"./GameBox.css\";\r\n\r\nconst GameBox = props => (\r\n    <div className=\"container-fluid\">{props.children}</div>\r\n);\r\n\r\nexport default GameBox;","import React, { Component } from 'react';\nimport options from \"./options.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport GameCards from \"./components/GameCards\";\nimport GameBox from \"./components/GameBox\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    options: options,\n    score: 0,\n    topScore: 0,\n    result: \"Click an Image to Begin\"\n  };\n\n  randomizeOrder = () => {\n    //change order of this.state.options\n    console.log(\"Randomizing\")\n\n    const options = this.state.options.map((a) => [Math.random(), a])\n    .sort( (a, b) => a[0]-b[0] )\n    .map( (a) => a[1] )\n\n    this.setState({options: options})\n  }\n\n  //handle click\n  handleClick = id => {\n    const chosen = this.state.options.find(item =>item.id === id)\n    \n    // If the chosen item had already been clicked \n    if (chosen.clicked === true) {\n\n      // Reset Score\n      this.setState({ \n        score: 0,\n        result: \"Wrong! Game Reset. Try Again.\",\n        options: this.state.options.map( (item) => item.clicked = false)\n       })\n\n      // Randomize the array order again\n      this.randomizeOrder()\n\n      // If it hasn't been clicked\n    } else {\n\n      // Check if this click wins the game\n      if (this.state.score === 11) {\n\n        // Reset Game, and set high Score to 12\n        this.setState({ \n          score: 0, \n          topScore: 12, \n          result: \"Congratulations! You Won! \\n Feel free to play again.\", \n          options: this.state.options.map( (item) => item.clicked = false )\n        })\n\n        // If this click does not win the game\n      } else {\n\n        // Increment Score and print new message\n        chosen.clicked = true;\n        this.setState({ \n          score: this.state.score + 1,\n          result: \"Choose another unique image...\"\n        })\n  \n        // Increment Top Score if Score would be higher\n        if (this.state.score >= this.state.topScore) {\n\n          this.setState({topScore: this.state.topScore + 1})\n\n        }\n      }\n      // Shuffle the Array\n      this.randomizeOrder()\n    }\n  \n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} topScore={this.state.topScore} result={this.state.result} />\n        <Jumbotron />\n        <GameBox>\n          {this.state.options.map(option => (\n          <GameCards \n            handleClick={this.handleClick}\n            id={option.id}\n            key={option.id}\n            image={option.image}\n            name={option.name}\n          />\n          ))}\n        </GameBox>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}